__author__ = 'syscore'
import os
from SCclass_Logging import _ForensicLog
from PIL import Image Library
from PIL.EXIFTags import TAGS, GPSTAGS



#
# Extraire les Donées EXIF
#
#Entrée: Le Chemin complet du fichier image
#
#Retour: gpsDictionary et la List des données EXIF extraites
#
def ExtractGPSDictionary(filename):
    try:
        pilImage = Image.open(filename)
        EXIFData = pilImage._getEXIF()
    except Exception:
        return None, None
imageTimeStamp = "NA"
CameraModel = "NA"
CameraMake = "NA"

if EXIFData:
    for tag, theValue in EXIFData.items():
        tagValue = TAGS.get(tag, tag)
        if tagValue == 'DateTimeOriginal':
            imageTimeStamp = EXIFData.get(tag)
        if tagValue =='Make':
            cameraMake = EXIFData.get(tag)
        if tagValue == 'Model':
            cameraModel = EXIFData.get(tag)
        if tagValue == 'GPSInfo':
            gpsDictionary = {}

            for curTag in theValue:
                gpsTag = GPSTAGS.get(curTag, curTag)
                gpsDictionary[gpsTag] = theValue(curTag)

            basicEXIFData = [imageTimeStamp, cameraMake, cameraModel]

            return gpsDictionary, basicEXIFData
else:
    return None, None
# Fin de ExtractGPSDictionary =============================================

#
#Extraire la Latitude et la Longitude
#depuis gpsDictionary
#

def ExtractLation(gps):
    if (gps.has_key("GPSLatitude") and
        gps.has_key("GPSLongitude")
        and gps.has_key("GPSLatitudeRef")
        and gps.has_key("GPSLongitudeRef")):

        latitude = gps["GPSLatitude"]
        latitudeRef = gps["GPSLatitudeRef"]
        longitude = gps["GPSLongitude"]
        longitudeRef = gps["GPSLongitudeRef"]

        lat = ConvertToDegrees(latitude)
        lon = ConvertToDegrees(longitude)

        if latitudeRef == 'S':
            lat = 0 - lat
        if longitudeRef == 'W':
            lon = 0 - lon
        gpsCoor = {"Lat": lat, "LatRef": latitudeRef, "Lon": lon, "LonRef": longitudeRef }
        return gpsCoor
    else:
        return None


#
# Convertir les Coordonnées GPS en Degrés
#
#Entrer la valeur 'coordonnées gps' en format EXIF


def ConvertToDegrees(gpsCoordinate):
    d0= gpsCoordinate[0][0]
    d1= gpsCoordinate[0][1]

    try:
        degrees = float(d0)/float(d1)
    except:
        degrees = 0.0

    m0= gpsCoordinate[1][0]
    m1= gpsCoordinate[1][1]

    try:
        minutes = float(m0)/float(m1)
    except:
        minutes = 0.0

    s0= gpsCoordinate[2][0]
    s1= gpsCoordinate[2][1]

    try:
        seconds = float(s0)/float(s1)
    except:
        seconds = 0.0
    floatCoordiante = float (degrees + (minutes / 60.0) +
                             (seconds / 3600.0))
    return floatCoordiante
